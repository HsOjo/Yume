---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hsojo.
--- DateTime: 2022/11/10 20:19
---

local Point = require('sys.core.feature.point')

---@class BaseDrawable: Updatable
---@field super Updatable
---@field parent BaseDrawable
---@field children BaseDrawable[]
local BaseDrawable = require('sys.core.base.updatable'):extend()
BaseDrawable.__name = 'Drawable'

function BaseDrawable:new()
  BaseDrawable.super.new(self)
  self:setFreeze(true)

  self.position = Point(0, 0)
  self.scale = Point(1, 1)

  ---@type table<any, Effect>
  self.effects = {}

  self.visible = true

  self._draw_position = self.position:copy()
  self._draw_scale = self.scale:copy()
end

function BaseDrawable:setPosition(x, y)
  self.position:change(x or 0, y or 0)
  self:computeDrawPosition()
end

function BaseDrawable:setScale(sx, sy)
  self.scale:change(sx or 1, sy or sx)
  self:computeDrawScale()
end

---@param effect Effect
function BaseDrawable:applyEffect(effect)
  self.effects[effect:type()] = effect
  effect:setDrawProcess(function()
    self:draw()
  end)
end

function BaseDrawable:clearEffect(effect_class)
  if effect_class then
    self.effects[effect_class] = nil
  else
    self.effects = {}
  end
end

---@param process fun(effect: Effect)
function BaseDrawable:batchEffects(process)
  for _, effect in pairs(self.effects) do
    process(effect)
  end
end

function BaseDrawable:setVisible(visible)
  self.visible = visible
end

function BaseDrawable:drawPosition()
  return self._draw_position
end

function BaseDrawable:drawScale()
  return self._draw_scale
end

function BaseDrawable:computeDrawScale()
  self._draw_scale:base(self.scale)
  if self.parent then
    self._draw_scale:scale(self.parent._draw_scale)
  end
  ---@param child BaseDrawable
  self:batchChildren(function(child, index)
    child:computeDrawScale()
    child:computeDrawPosition()
  end, BaseDrawable)
end

function BaseDrawable:computeDrawPosition()
  self._draw_position:base(self.position)
  if self.parent then
    self._draw_position:scale(self.parent._draw_scale):offset(self.parent._draw_position)
  end
  ---@param child BaseDrawable
  self:batchChildren(function(child, index)
    child:computeDrawPosition()
  end, BaseDrawable)
end

function BaseDrawable:draw()
  self:drawChildren()
end

function BaseDrawable:drawChildren()
  ---@param child BaseDrawable
  self:batchChildren(function(child, index)
    child:drawCall()
  end, BaseDrawable)
end

function BaseDrawable:drawBefore()
  self:batchEffects(function(effect)
    effect:drawBefore()
  end)
end

function BaseDrawable:drawAfter()
  self:batchEffects(function(effect)
    effect:drawAfter()
  end)
end

function BaseDrawable:drawCall()
  if not self.visible then
    return
  end

  self:drawBefore()
  self:draw()
  self:drawAfter()
end

return BaseDrawable
