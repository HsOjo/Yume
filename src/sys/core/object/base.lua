---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hsojo.
--- DateTime: 2022/11/10 20:19
---

local Point = require('sys.core.util.point')
---@class BaseObject: ClassicObject
local BaseObject = require('sys.3rd.classic'):extend()

local CK_PREV_COLOR = 'prev_color'
local CK_PREV_BLEND_MODE = 'prev_blend_mode'

function BaseObject:new()
  self.position = Point(0, 0)
  self.scale = Point(1, 1)
  self.color = nil
  self.blend_mode = nil
  self.parent = nil
  self.childrens = {}
  self.context = {}
  self.visible = true
end

---@param element BaseObject
function BaseObject:append(element)
  local index
  if element.parent ~= self then
    index = table.insert(self.childrens, element)
    element.parent = self
  end

  return element, index
end

---@param x number
---@param y number
function BaseObject:setPosition(x, y)
  self.position = Point(x or 0, y or 0)
end

---@param sx number
---@param sy number
function BaseObject:setScale(sx, sy)
  self.scale = Point(sx or 1, sy or 1)
end

function BaseObject:setColor(color)
  self.color = color
end

function BaseObject:setVisible(visible)
  self.visible = visible
end

function BaseObject:drawPosition()
  if self.parent then
    return self.position:scale(self.parent:drawScale()):offset(self.parent:drawPosition())
  end
  return self.position
end

function BaseObject:drawScale()
  if self.parent then
    return self.scale:scale(self.parent:drawScale())
  end
  return self.scale
end

function BaseObject:draw()

end

function BaseObject:drawBefore()
  if self.color then
    local r, g, b, a = love.graphics.getColor()
    self.context[CK_PREV_COLOR] = { r, g, b, a }
    love.graphics.setColor(self.color)
  end
  if self.blend_mode then
    self.context[CK_PREV_BLEND_MODE] = love.graphics.getBlendMode()
    love.graphics.setBlendMode(self.blend_mode)
  end
end

function BaseObject:drawAfter()
  if self.color then
    love.graphics.setColor(self.context[CK_PREV_COLOR])
  end
  if self.blend_mode then
    love.graphics.setBlendMode(self.context[CK_PREV_BLEND_MODE])
  end
end

function BaseObject:drawCall()
  if not self.visible then
    return
  end

  self:drawBefore()
  self:draw()
  ---@param children BaseObject
  for _, children in ipairs(self.childrens) do
    children:drawCall()
  end
  self:drawAfter()
end

function BaseObject:release()
  for _, children in ipairs(self.childrens) do
    children:release()
  end
  self.parent = nil
  self.context = nil
end

return BaseObject
