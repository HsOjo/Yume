---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hsojo.
--- DateTime: 2022/11/10 20:19
---

---@class BaseObject: ClassicObject
local BaseObject = require('sys.3rd.classic'):extend()

local CK_PREV_COLOR = 'prev_color'
local CK_PREV_BLEND_MODE = 'prev_blend_mode'

function BaseObject:new()
  self.x = 0
  self.y = 0
  self.sx = 1
  self.sy = 1
  self.color = nil
  self.blend_mode = nil
  self.parent = nil
  self.childrens = {}
  self.context = {}
  self.visible = true
  self.draw_mode = 'line'
end

---@param element BaseObject
function BaseObject:append(element)
  local index = table.insert(self.childrens, element)
  element.parent = self
  return element, index
end

function BaseObject:setPosition(x, y)
  self.x, self.y = x, y
end

function BaseObject:setScale(sx, sy)
  self.sx, self.sy = sx, sy
end

function BaseObject:setColor(color)
  self.color = color
end

function BaseObject:setVisible(visible)
  self.visible = visible
end

function BaseObject:drawPosition()
  local x, y = self.x, self.y
  if self.parent then
    local px, py = self.parent:drawPosition()
    local sx, sy = self.parent:drawScale()
    return (x * sx) + px, (y * sy) + py
  end
  return x, y
end

function BaseObject:drawScale()
  if self.parent then
    local sx, sy = self.parent:drawScale()
    return self.sx * sx, self.sy * sy
  end
  return self.sx, self.sy
end

function BaseObject:draw()

end

function BaseObject:drawBefore()
  if self.color then
    local r, g, b, a = love.graphics.getColor()
    self.context[CK_PREV_COLOR] = { r, g, b, a }
    love.graphics.setColor(self.color)
  end
  if self.blend_mode then
    self.context[CK_PREV_BLEND_MODE] = love.graphics.getBlendMode()
    love.graphics.setBlendMode(self.blend_mode)
  end
end

function BaseObject:drawAfter()
  if self.color then
    love.graphics.setColor(self.context[CK_PREV_COLOR])
  end
  if self.blend_mode then
    love.graphics.setBlendMode(self.context[CK_PREV_BLEND_MODE])
  end
end

function BaseObject:drawCall()
  self:drawBefore()
  self:draw()
  ---@param children BaseObject
  for _, children in ipairs(self.childrens) do
    if children.visible then
      children:drawCall()
    end
  end
  self:drawAfter()
end

function BaseObject:release()
  for _, children in ipairs(self.childrens) do
    children:release()
  end
  self.parent = nil
  self.context = nil
end

return BaseObject
