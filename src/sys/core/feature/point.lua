---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hsojo.
--- DateTime: 2022/11/12 19:24
---

---@class Point: BaseObject
local Point = require('sys.core.base.object'):extend()
Point.__name = 'Point'

function Point:new(x, y)
  self.x, self.y = x or 0, y or 0
end

function Point:change(x, y)
  self.x, self.y = x, y
  return self
end

function Point:unpack()
  return self.x, self.y
end

---@param point Point
function Point:base(point)
  return self:change(point:unpack())
end

function Point:copy()
  return Point(self:unpack())
end

---@param point Point
function Point:offset(point, scale)
  scale = scale or 1
  return self:change(
    self.x + point.x * scale,
    self.y + point.y * scale
  )
end

---@param point Point
function Point:scale(point, reverse)
  local x, y = point:unpack()
  if reverse then
    x = 1 / x
    y = 1 / y
  end
  return self:change(
    self.x * x,
    self.y * y
  )
end

function Point:move(radians, distance)
  return self:change(
    self.x + distance * math.cos(radians),
    self.y + distance * math.sin(radians)
  )
end

---@param point Point
function Point:distance(point)
  return math.sqrt(
    math.pow(self.x - point.x, 2)
      + math.pow(self.y - point.y, 2)
  )
end

---@param point Point
---@return number radians of two points.
function Point:angel(point)
  local pi = math.pi
  local p1, p2 = self, point
  
  if p2.x == p1.x then
    if p2.y > p1.y then
      return pi * 0.5
    else
      return pi * 1.5
    end
  elseif p2.y == p1.y then
    if p2.x > p1.x then
      return 0
    else
      return pi
    end
  else
    local radians = math.atan((p1.y - p2.y) / (p1.x - p2.x))
    if p2.x < p1.x and p2.y > p1.y then
      return radians + pi
    elseif p2.x < p1.x and p2.y < p1.y then
      return radians + pi
    elseif p2.x > p1.x and p2.y < p1.y then
      return radians + 2 * pi
    else
      return radians
    end
  end
end

return Point
