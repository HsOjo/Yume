---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hsojo.
--- DateTime: 2022/11/11 22:15
---

---@class Key: ClassicObject
local Key = require('sys.3rd.classic'):extend()
Key._status = {}
Key._prev_code = nil
Key._last_code = nil

function Key:new(code)
  self.code = code
  if not Key._status[code] then
    Key._status[code] = {
      is_press = false,
      is_down = false,
      is_up = false,
      prev_down_time = 0,
      last_down_time = 0,
    }
  end

  self.status = Key._status[code]
end

function Key:isDown()
  return self.status.is_down
end

function Key:isUp()
  return self.status.is_up
end

function Key:isPress()
  return self.status.is_press
end

function Key:isCombo(interval)
  interval = interval or 0.2
  local combo_interval = self.status.last_down_time - self.status.prev_down_time
  return self:isDown() and self.code == Key._prev_code and combo_interval < interval
end

function Key.callback_updated()
  for _, status in pairs(Key._status) do
    status.is_down = false
    status.is_up = false
  end
end

function Key.callback_pressed(code)
  local key = Key(code)
  local status = key.status
  if not status.is_press then
    Key._prev_code = Key._last_code
    Key._last_code = key.status

    status.is_down = true
    status.prev_down_time = status.last_down_time
    status.last_down_time = love.timer.getTime()
  end
  status.is_press = true
end

function Key.callback_released(code)
  local status = Key(code).status
  status.is_press = false
  status.is_up = true
end

return Key
